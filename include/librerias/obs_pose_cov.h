/* Auto-generated by genmsg_cpp for file /home/erobots/ros/ros_workspace/jaguar/layer3_msgs/msg/obs_pose_cov.msg */
#ifndef LAYER3_MSGS_MESSAGE_OBS_POSE_COV_H
#define LAYER3_MSGS_MESSAGE_OBS_POSE_COV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Pose2D.h"

namespace layer3_msgs
{
template <class ContainerAllocator>
struct obs_pose_cov_ {
  typedef obs_pose_cov_<ContainerAllocator> Type;

  obs_pose_cov_()
  : robot_id(0)
  , pose()
  , covariance()
  {
    covariance.assign(0.0);
  }

  obs_pose_cov_(const ContainerAllocator& _alloc)
  : robot_id(0)
  , pose(_alloc)
  , covariance()
  {
    covariance.assign(0.0);
  }

  typedef int32_t _robot_id_type;
  int32_t robot_id;

  typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose2D_<ContainerAllocator>  pose;

  typedef boost::array<double, 9>  _covariance_type;
  boost::array<double, 9>  covariance;


  typedef boost::shared_ptr< ::layer3_msgs::obs_pose_cov_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::layer3_msgs::obs_pose_cov_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct obs_pose_cov
typedef  ::layer3_msgs::obs_pose_cov_<std::allocator<void> > obs_pose_cov;

typedef boost::shared_ptr< ::layer3_msgs::obs_pose_cov> obs_pose_covPtr;
typedef boost::shared_ptr< ::layer3_msgs::obs_pose_cov const> obs_pose_covConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::layer3_msgs::obs_pose_cov_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::layer3_msgs::obs_pose_cov_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace layer3_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::layer3_msgs::obs_pose_cov_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::layer3_msgs::obs_pose_cov_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::layer3_msgs::obs_pose_cov_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efc0ac169425b43ff07b5d34b0f83b87";
  }

  static const char* value(const  ::layer3_msgs::obs_pose_cov_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xefc0ac169425b43fULL;
  static const uint64_t static_value2 = 0xf07b5d34b0f83b87ULL;
};

template<class ContainerAllocator>
struct DataType< ::layer3_msgs::obs_pose_cov_<ContainerAllocator> > {
  static const char* value() 
  {
    return "layer3_msgs/obs_pose_cov";
  }

  static const char* value(const  ::layer3_msgs::obs_pose_cov_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::layer3_msgs::obs_pose_cov_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 robot_id\n\
geometry_msgs/Pose2D pose\n\
float64[9] covariance\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::layer3_msgs::obs_pose_cov_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::layer3_msgs::obs_pose_cov_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::layer3_msgs::obs_pose_cov_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.robot_id);
    stream.next(m.pose);
    stream.next(m.covariance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct obs_pose_cov_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::layer3_msgs::obs_pose_cov_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::layer3_msgs::obs_pose_cov_<ContainerAllocator> & v) 
  {
    s << indent << "robot_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // LAYER3_MSGS_MESSAGE_OBS_POSE_COV_H

