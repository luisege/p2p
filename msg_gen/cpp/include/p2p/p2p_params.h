/* Auto-generated by genmsg_cpp for file /home/erobots/ros/ros_workspace/jaguar/p2p/msg/p2p_params.msg */
#ifndef P2P_MESSAGE_P2P_PARAMS_H
#define P2P_MESSAGE_P2P_PARAMS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace p2p
{
template <class ContainerAllocator>
struct p2p_params_ {
  typedef p2p_params_<ContainerAllocator> Type;

  p2p_params_()
  : status(0)
  , go(0)
  , targetx(0.0)
  , targety(0.0)
  {
  }

  p2p_params_(const ContainerAllocator& _alloc)
  : status(0)
  , go(0)
  , targetx(0.0)
  , targety(0.0)
  {
  }

  typedef int32_t _status_type;
  int32_t status;

  typedef int32_t _go_type;
  int32_t go;

  typedef double _targetx_type;
  double targetx;

  typedef double _targety_type;
  double targety;


  typedef boost::shared_ptr< ::p2p::p2p_params_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p2p::p2p_params_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct p2p_params
typedef  ::p2p::p2p_params_<std::allocator<void> > p2p_params;

typedef boost::shared_ptr< ::p2p::p2p_params> p2p_paramsPtr;
typedef boost::shared_ptr< ::p2p::p2p_params const> p2p_paramsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::p2p::p2p_params_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::p2p::p2p_params_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace p2p

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::p2p::p2p_params_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::p2p::p2p_params_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::p2p::p2p_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fba86567c02b744e28b39fd3fcf3f986";
  }

  static const char* value(const  ::p2p::p2p_params_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfba86567c02b744eULL;
  static const uint64_t static_value2 = 0x28b39fd3fcf3f986ULL;
};

template<class ContainerAllocator>
struct DataType< ::p2p::p2p_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "p2p/p2p_params";
  }

  static const char* value(const  ::p2p::p2p_params_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::p2p::p2p_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 status\n\
int32 go\n\
float64 targetx\n\
float64 targety\n\
";
  }

  static const char* value(const  ::p2p::p2p_params_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::p2p::p2p_params_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::p2p::p2p_params_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
    stream.next(m.go);
    stream.next(m.targetx);
    stream.next(m.targety);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct p2p_params_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p2p::p2p_params_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::p2p::p2p_params_<ContainerAllocator> & v) 
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "go: ";
    Printer<int32_t>::stream(s, indent + "  ", v.go);
    s << indent << "targetx: ";
    Printer<double>::stream(s, indent + "  ", v.targetx);
    s << indent << "targety: ";
    Printer<double>::stream(s, indent + "  ", v.targety);
  }
};


} // namespace message_operations
} // namespace ros

#endif // P2P_MESSAGE_P2P_PARAMS_H

